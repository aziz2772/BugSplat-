void update2Player(void)
{

   //On rajoute un timer au cas où notre héros mourrait lamentablement en tombant dans un trou...
   //Si le timer vaut 0, c'est que tout va bien, sinon, on le décrémente jusqu'à 0, et là,
   //on réinitialise.
   //C'est pour ça qu'on ne gère le joueur que si ce timer vaut 0.
  if (player2.timerMort == 0)
  {

    //On réinitialise notre vecteur de déplacement latéral (X), pour éviter que le perso
    //ne fonce de plus en plus vite pour atteindre la vitesse de la lumière ! ;)
    //Essayez de le désactiver pour voir !
    player2.dirX = 0;

    // La gravité fait toujours tomber le perso : on incrémente donc le vecteur Y
    player2.dirY += GRAVITY_SPEED;

    //Mais on le limite pour ne pas que le joueur se mette à tomber trop vite quand même
    if (player2.dirY >= MAX_FALL_SPEED)
    {
        player2.dirY = MAX_FALL_SPEED;
    }

    //Voilà, au lieu de changer directement les coordonnées du joueur, on passe par un vecteur
    //qui sera utilisé par la fonction mapCollision(), qui regardera si on peut ou pas déplacer
    //le joueur selon ce vecteur et changera les coordonnées du player en fonction.
     if (input.left == 1)
    {
        player2.dirX -= PLAYER_SPEED;
        player2.direction = LEFT;

/*if (point.posnokta.x>250)
point.posnokta.x-=point_SPEED;
*/
        if(player2.etat != WALK_LEFT && player2.onGround == 1)
        {
            player2.etat = WALK_LEFT;
            player2.sprite = IMG_Load("belhag.png");
            player2.frameNumber = 0;
        }
    }

    else if (input.down == 1)
    {
/*point.posnokta.x+=point_SPEED;*/
        player2.dirX += PLAYER_SPEED;
        player2.direction = RIGHT;

    


    
        if(player2.etat != WALK_RIGHT && player2.onGround == 1)
        {
            player2.etat = WALK_RIGHT;
            player2.sprite = IMG_Load("belha.png");
            player2.frameNumber = 0;

        }

    }

    //Si on n'appuie sur rien et qu'on est sur le sol, on charge l'animation marquant l'inactivité (Idle)
    else if(input.right == 0 && input.left == 0 && player2.onGround == 1)
    {
        //On teste si le joueur n'était pas déjà inactif, pour ne pas recharger l'animation
        //à chaque tour de boucle

        if(player2.etat != IDLE)
        {
            player2.etat = IDLE;
            //On change l'animation selon la direction
            if(player2.direction == LEFT)
            {
                player2.sprite = IMG_Load("bel neutre g.png");
                player2.frameNumber = 0;
            }
            else
            {
                player2.sprite = IMG_Load("bel neutre.png");
                player2.frameNumber = 0;
            }

        }

    }



    //Et voici la fonction de saut très simple :
    //Si on appuie sur la touche saut et qu'on est sur le sol, alors on attribue une valeur
    //négative au vecteur Y
    //parce que sauter veut dire se rapprocher du haut de l'écran et donc de y=0.
    if (input.jump == 1 && player2.onGround == 1)
    {
        player2.dirY = -JUMP_HEIGHT;
        player2.onGround = 0;

    }

    //On gère l'anim du saut
    if(player2.onGround == 0)
    {
        if(player2.direction == RIGHT && player2.etat != JUMP_RIGHT)
        {
            player2.etat = JUMP_RIGHT;
            player2.sprite = IMG_Load("bel jump d.png");
            player2.frameNumber = 0;
        }
        else if(player2.direction == LEFT && player2.etat != JUMP_LEFT)
        {
            player2.etat = JUMP_LEFT;
            player2.sprite = IMG_Load("bel jump g.png");
            player2.frameNumber = 0;
        }

    }



    //On rajoute notre fonction de détection des collisions qui va mettre à jour les coordonnées
    //de notre super lapin, puis on centre le scrolling comme avant.
    mapCollision2(&player2);
    centerScrollingOn2Player();
 

  }

    //Gestion de la mort quand le héros tombe dans un trou :
    //Si timerMort est différent de 0, c'est qu'il faut réinitialiser le joueur.
    //On ignore alors ce qui précède et on joue cette boucle (un wait en fait) jusqu'à ce que
    // timerMort == 1. A ce moment-là, on le décrémente encore -> il vaut 0 et on réinitialise
    //le jeu avec notre bonne vieille fonction d'initialisation ;) !

    if (player2.timerMort > 0)
    {
        player2.timerMort--;

        if (player2.timerMort == 0)
        {
            /* Si on est mort */
            initialize2Player();
vie.nbr_vie--;
        }
    }

}
void centerScrollingOn2Player(void)
 {

    //On définit les coordonnées du début de l'affichage de la map par rapport à celles
    //du joueur.
    //Pour centrer le joueur, la map doit donc s'afficher à un demi-écran avant la position
    //du joueur.
    //Puis on "clamp" (limite) l'affichage de l'écran pour ne pas sortir de la map.
    map.start2X = player2.x - (SCREEN_WIDTH / 6);

    if (map.start2X < 400)
    {
        map.start2X = 400;
    }

    else if (map.start2X + SCREEN_WIDTH >= 2500)
    {
        map.start2X = 2500 - SCREEN_WIDTH;
    }

    map.start2Y = player2.y - (SCREEN_HEIGHT / 6);

    if (map.start2Y < 0)
    {
        map.start2Y = 0;
    }

    else if (map.start2Y + SCREEN_HEIGHT >= 840)
    {
        map.start2Y = 840 - SCREEN_HEIGHT;
    }
 }
